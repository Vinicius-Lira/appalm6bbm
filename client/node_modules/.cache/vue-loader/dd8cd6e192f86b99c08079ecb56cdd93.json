{"remainingRequest":"/home/vlira/Documentos/ProntuarioBM/views/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vlira/Documentos/ProntuarioBM/views/src/components/helper/ParametrosExame.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vlira/Documentos/ProntuarioBM/views/src/components/helper/ParametrosExame.vue","mtime":1569199807105},{"path":"/home/vlira/Documentos/ProntuarioBM/views/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/vlira/Documentos/ProntuarioBM/views/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vlira/Documentos/ProntuarioBM/views/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n    props: ['dialog', 'idExame'],\n    data: () => ({\n        exame: \"\",\n        dialogAddParametro: false,\n        dialogValoreReferenciaParametros: false,\n        headers: [\n            {\n                text: 'Parâmetro',\n                align: 'left',\n                sortable: true,\n                value: 'parametro',\n            },\n            { text: 'Unidade medida', value: 'unidadeMedida' },\n            { text: 'Ações', value: 'action', sortable: false },\n        ],\n        desserts: [],\n        search: \"\",\n        rowsPerPageItems: [8, 12, 15],\n        pagination: {\n            rowsPerPage: 20\n        },\n        editedIndex: -1,\n        editedItem: {\n            parametro: \"\",\n            unidadeMedida: \"\",\n            idExame: null,\n            createdAt: \"\",\n            updatedAt: \"\"\n        },\n        defaultItem: {\n            parametro: \"\",\n            unidadeMedida: \"\",\n            idExame: null,\n            createdAt: \"\",\n            updatedAt: \"\"\n        },\n        textoSnackbar: \"\",\n        color: 'success',\n        snackbar: false\n    }),\n    created () {\n        this.initialize()\n    },\n    computed: {\n        formTitle () {\n            return this.editedIndex === -1 ? 'Novo Parâmetro' : 'Editar Parâmetro'\n        }\n    },\n    watch: {\n        dialog() {\n            this.axios.get('http://localhost:3000/exame/' + this.idExame).then(response => {\n                this.exame = response.data;\n            });\n\n            this.atualizaParametros();\n        },\n        dialogAddParametro (val) {\n            val || this.close()\n        },\n    },\n    methods: {\n        initialize () {\n\n        },\n        openDialogValoresReferencia(item){\n            this.editedIndex = this.desserts.indexOf(item);\n            this.editedItem = Object.assign({}, item);\n            this.dialogValoreReferenciaParametros = true;\n        },\n        closeDialogValoresReferencia() {\n            this.dialogParametros = false;\n            this.editedItem = Object.assign({}, this.defaultItem);\n            this.dialogValoreReferenciaParametros = false;\n        },\n        closeSnackbar () {\n            this.snackbar = false;\n        },\n        atualizaParametros() {\n            this.axios.get('http://localhost:3000/parametroExame/getByIdExame/' + this.idExame ).then(response => {\n                this.desserts = response.data;\n            });\n        },\n        editItem (item) {\n            this.editedIndex = this.desserts.indexOf(item);\n            this.editedItem = Object.assign({}, item);\n            this.dialogAddParametro = true;\n        },\n        deleteItem (item) {\n            this.axios.delete('http://localhost:3000/parametroExame/' + item.id + \"/delete\").then(response => {\n                if(response.data){\n                    this.snackbar = true;\n                    this.color = 'success';\n                    this.textoSnackbar = \"Parâmetro apagado com sucesso!\";\n                    this.initialize();\n                }else {\n                    this.snackbar = true;\n                    this.color = 'error';\n                    this.textoSnackbar = \"Ocorreu um erro ao tentar apagar o registro!\";\n                }\n            });\n        },\n        close () {\n            this.dialogAddParametro = false;\n            setTimeout(() => {\n                this.editedItem = Object.assign({}, this.defaultItem)\n                this.editedIndex = -1\n            }, 300);\n        },\n        validaCampos() {\n            return  this.editedItem.parametro != '' && this.editedItem.unidadeMedida != '';\n        },\n        save () {\n            if (this.editedIndex > -1) {\n                this.editedItem.idExame = this.idExame;\n                this.axios.put('http://localhost:3000/parametroExame', this.editedItem).then(response => {\n                    if(response.data){\n                        this.textoSnackbar = \"Registro atualizado com sucesso!\";\n                        this.snackbar = true;\n                        this.color = 'success';\n                        this.atualizaParametros();\n                        this.dialogAddParametro = false;\n                    }else {\n                        this.snackbar = true;\n                        this.color = 'error';\n                        this.textoSnackbar = \"Ocorreu um erro ao atualizar!\";\n                        this.dialogAddParametro = false;\n                    }\n                });\n            } else {\n                if(this.validaCampos()){\n                    this.editedItem.idExame = this.idExame;\n                    this.axios.post('http://localhost:3000/parametroExame', this.editedItem).then(response => {\n                        if(response.data.id){\n                            this.textoSnackbar = \"Parâmetro inserida com sucesso!\";\n                            this.snackbar = true;\n                            this.color = 'success';\n                            this.atualizaParametros();\n                            this.dialogAddParametro = false;\n                        }else {\n                            this.snackbar = true;\n                            this.color = 'error';\n                            this.textoSnackbar = \"Ocorreu um erro ao cadastrar!\";\n                            this.dialogAddParametro = false;\n                        }\n                    });\n                }else {\n                    this.snackbar = true;\n                    this.color = 'error';\n                    this.textoSnackbar = \"Existe campos vazios ou incorretos!\";\n                    this.dialogAddParametro = false;\n                }\n            }\n        },\n    }\n}\n\n",{"version":3,"sources":["ParametrosExame.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ParametrosExame.vue","sourceRoot":"src/components/helper","sourcesContent":["<template>\n    <v-row justify=\"center\">\n        <v-dialog v-model=\"dialog\" fullscreen hide-overlay transition=\"dialog-bottom-transition\">\n\n            <v-card>\n                <v-toolbar dark color=\"error\">\n                    <v-btn icon dark @click=\"$emit('setFalseDialog')\">\n                        <v-icon>mdi-close</v-icon>\n                    </v-btn>\n                    <v-toolbar-title>{{ exame.exame }}</v-toolbar-title>\n                        <div class=\"flex-grow-1\"></div>\n                        <v-toolbar-items>\n                        <v-btn dark text @click=\"$emit('setFalseDialog')\">Salvar</v-btn>\n                    </v-toolbar-items>\n                </v-toolbar>\n\n                <v-data-table\n                    :headers=\"headers\"\n                    :items=\"desserts\"\n                    :search=\"search\"\n                    class=\"elevation-1 ma-2\"\n                    :footer-props=\"{\n                        'items-per-page-options': [8,10,12,14]\n                    }\"\n                >\n\n                    <valores-referencia-parametro-dialog\n                        v-on:setFalseDialog=\"closeDialogValoresReferencia\"\n                        v-bind:dialog=\"dialogValoreReferenciaParametros\"\n                        v-bind:idParametro=\"editedItem.id\"\n                    ></valores-referencia-parametro-dialog>\n\n                    <template v-slot:top>\n                        <v-toolbar flat color=\"white\">\n\n                            <v-container>\n                                <v-row>\n                                    <v-col cols=\"12\" sm=\"12\" md=\"5\">\n                                        <v-text-field\n                                            v-model=\"search\"\n                                            append-icon=\"mdi-magnify\"\n                                            label=\"Buscar\"\n                                            single-line\n                                            hide-details\n                                            outlined\n                                        ></v-text-field>\n                                    </v-col>\n                                </v-row>\n                            </v-container>\n\n                            <snackbar\n                                :textoSnackbar=\"textoSnackbar\"\n                                :color=\"color\"\n                                :snackbar=\"snackbar\"\n                                v-on:closeSnackbar=\"closeSnackbar\"\n                            ></snackbar>\n\n                            <div class=\"flex-grow-1\"></div>\n\n                            <v-dialog v-model=\"dialogAddParametro\" max-width=\"1000px\">\n\n                                <template v-slot:activator=\"{ on }\">\n                                    <v-btn color=\"primary\" class=\"mb-2\" @click=\"dialogAddParametro = true\" >Adicionar</v-btn>\n                                </template>\n\n                                <v-card>\n                                    <v-card-title>\n                                        <span class=\"headline\">{{ formTitle }}</span>\n                                    </v-card-title>\n\n                                    <v-card-text>\n                                        <v-container>\n                                            <v-row>\n                                                <v-col cols=\"12\" sm=\"12\" md=\"6\">\n                                                    <v-text-field\n                                                        v-model=\"editedItem.parametro\"\n                                                        :rules=\"[v => !!v || 'Obrigatório prencher o parâmetro!']\"\n                                                        label=\"Parâmetro\"\n                                                        outlined\n                                                    ></v-text-field>\n                                                </v-col>\n\n                                                <v-col cols=\"12\" sm=\"12\" md=\"6\">\n                                                    <v-text-field\n                                                        v-model=\"editedItem.unidadeMedida\"\n                                                        :rules=\"[v => !!v || 'Obrigatório prencher a unidade medida!']\"\n                                                        label=\"Unidade Medida\"\n                                                        outlined\n                                                    ></v-text-field>\n                                                </v-col>\n                                            </v-row>\n                                        </v-container>\n                                    </v-card-text>\n\n                                    <v-card-actions>\n                                        <div class=\"flex-grow-1\"></div>\n                                        <v-btn color=\"blue darken-1\" text @click=\"close\">Cancelar</v-btn>\n                                        <v-btn color=\"blue darken-1\" text @click=\"save\">Salvar</v-btn>\n                                    </v-card-actions>\n                                </v-card>\n                            </v-dialog>\n                        </v-toolbar>\n                    </template>\n\n                    <template v-slot:item.action=\"{ item }\">\n\n                        <v-icon\n                            small\n                            class=\"mr-2\"\n                            @click=\"openDialogValoresReferencia(item)\"\n                        >\n                            mdi-eye\n                        </v-icon>\n\n                        <v-icon\n                            small\n                            class=\"mr-2\"\n                            @click=\"editItem(item)\"\n                        >\n                            mdi-pencil\n                        </v-icon>\n                        <v-icon\n                            small\n                            @click=\"deleteItem(item)\"\n                        >\n                            mdi-delete\n                        </v-icon>\n                        </template>\n\n                        <template v-slot:no-data>\n                            <v-btn color=\"primary\" @click=\"initialize\">Reset</v-btn>\n                        </template>\n\n                </v-data-table>\n\n            </v-card>\n        </v-dialog>\n    </v-row>\n</template>\n\n<script>\n\n    export default {\n        props: ['dialog', 'idExame'],\n        data: () => ({\n            exame: \"\",\n            dialogAddParametro: false,\n            dialogValoreReferenciaParametros: false,\n            headers: [\n                {\n                    text: 'Parâmetro',\n                    align: 'left',\n                    sortable: true,\n                    value: 'parametro',\n                },\n                { text: 'Unidade medida', value: 'unidadeMedida' },\n                { text: 'Ações', value: 'action', sortable: false },\n            ],\n            desserts: [],\n            search: \"\",\n            rowsPerPageItems: [8, 12, 15],\n            pagination: {\n                rowsPerPage: 20\n            },\n            editedIndex: -1,\n            editedItem: {\n                parametro: \"\",\n                unidadeMedida: \"\",\n                idExame: null,\n                createdAt: \"\",\n                updatedAt: \"\"\n            },\n            defaultItem: {\n                parametro: \"\",\n                unidadeMedida: \"\",\n                idExame: null,\n                createdAt: \"\",\n                updatedAt: \"\"\n            },\n            textoSnackbar: \"\",\n            color: 'success',\n            snackbar: false\n        }),\n        created () {\n            this.initialize()\n        },\n        computed: {\n            formTitle () {\n                return this.editedIndex === -1 ? 'Novo Parâmetro' : 'Editar Parâmetro'\n            }\n        },\n        watch: {\n            dialog() {\n                this.axios.get('http://localhost:3000/exame/' + this.idExame).then(response => {\n                    this.exame = response.data;\n                });\n\n                this.atualizaParametros();\n            },\n            dialogAddParametro (val) {\n                val || this.close()\n            },\n        },\n        methods: {\n            initialize () {\n\n            },\n            openDialogValoresReferencia(item){\n                this.editedIndex = this.desserts.indexOf(item);\n                this.editedItem = Object.assign({}, item);\n                this.dialogValoreReferenciaParametros = true;\n            },\n            closeDialogValoresReferencia() {\n                this.dialogParametros = false;\n                this.editedItem = Object.assign({}, this.defaultItem);\n                this.dialogValoreReferenciaParametros = false;\n            },\n            closeSnackbar () {\n                this.snackbar = false;\n            },\n            atualizaParametros() {\n                this.axios.get('http://localhost:3000/parametroExame/getByIdExame/' + this.idExame ).then(response => {\n                    this.desserts = response.data;\n                });\n            },\n            editItem (item) {\n                this.editedIndex = this.desserts.indexOf(item);\n                this.editedItem = Object.assign({}, item);\n                this.dialogAddParametro = true;\n            },\n            deleteItem (item) {\n                this.axios.delete('http://localhost:3000/parametroExame/' + item.id + \"/delete\").then(response => {\n                    if(response.data){\n                        this.snackbar = true;\n                        this.color = 'success';\n                        this.textoSnackbar = \"Parâmetro apagado com sucesso!\";\n                        this.initialize();\n                    }else {\n                        this.snackbar = true;\n                        this.color = 'error';\n                        this.textoSnackbar = \"Ocorreu um erro ao tentar apagar o registro!\";\n                    }\n                });\n            },\n            close () {\n                this.dialogAddParametro = false;\n                setTimeout(() => {\n                    this.editedItem = Object.assign({}, this.defaultItem)\n                    this.editedIndex = -1\n                }, 300);\n            },\n            validaCampos() {\n                return  this.editedItem.parametro != '' && this.editedItem.unidadeMedida != '';\n            },\n            save () {\n                if (this.editedIndex > -1) {\n                    this.editedItem.idExame = this.idExame;\n                    this.axios.put('http://localhost:3000/parametroExame', this.editedItem).then(response => {\n                        if(response.data){\n                            this.textoSnackbar = \"Registro atualizado com sucesso!\";\n                            this.snackbar = true;\n                            this.color = 'success';\n                            this.atualizaParametros();\n                            this.dialogAddParametro = false;\n                        }else {\n                            this.snackbar = true;\n                            this.color = 'error';\n                            this.textoSnackbar = \"Ocorreu um erro ao atualizar!\";\n                            this.dialogAddParametro = false;\n                        }\n                    });\n                } else {\n                    if(this.validaCampos()){\n                        this.editedItem.idExame = this.idExame;\n                        this.axios.post('http://localhost:3000/parametroExame', this.editedItem).then(response => {\n                            if(response.data.id){\n                                this.textoSnackbar = \"Parâmetro inserida com sucesso!\";\n                                this.snackbar = true;\n                                this.color = 'success';\n                                this.atualizaParametros();\n                                this.dialogAddParametro = false;\n                            }else {\n                                this.snackbar = true;\n                                this.color = 'error';\n                                this.textoSnackbar = \"Ocorreu um erro ao cadastrar!\";\n                                this.dialogAddParametro = false;\n                            }\n                        });\n                    }else {\n                        this.snackbar = true;\n                        this.color = 'error';\n                        this.textoSnackbar = \"Existe campos vazios ou incorretos!\";\n                        this.dialogAddParametro = false;\n                    }\n                }\n            },\n        }\n    }\n\n</script>\n"]}]}